name: docker-build-push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Docker Build
    environment: githubactions
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      WORKDIR: .
      IMAGE: jiveshgov/githubactions
      IMAGE_REGISTRY: docker.io
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.USER }}
          password: ${{ vars.PASSWORD }}

      - name: Build and Push Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE }}:${{ env.GITHUB_SHA_SHORT }} \
            --output=type=image,push=true \
            ${{ env.WORKDIR }}

  push:
    name: Docker Push
    environment: githubactions
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      WORKDIR: .
      IMAGE: jiveshgov/githubactions
      IMAGE_REGISTRY: docker.io
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.USER }}
          password: ${{ vars.PASSWORD }}

      - name: Tag and Push Latest
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE }}:${{ env.GITHUB_SHA_SHORT }} \
            -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE }}:latest \
            --output=type=image,push=true \
            ${{ env.WORKDIR }}
